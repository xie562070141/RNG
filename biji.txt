
Day 04
永久定义别名   vim /root/.bashrc（需要另开一个终端）
• 影响指定用户的 bash 解释环境
– ~/.bashrc,每次开启 bash 终端时生效
• 影响所有用户的 bash 解释环境
– /etc/bashrc,每次开启 bash 终端时生效
永久修改主机名 vim /etc/hostname
指定DNS服务器  vim /etc/resolv.conf 
Day 05
唯一标识：UID  GID
管理员UID：0
用户基本信息存放在/etc/passwd  密码存放在/etc/shadow
网络yum不需要挂载光盘http、ftp。   本地yum则不需要file
组基本信息存放在/etc/gruop  组成员信息存放在/etc/gshadow
nslookup 要解析的域名
linux命令中默认解释器是/bin/bash
NTP時間服務配置文件：/etc/ /etc/chrony.conf
vim /etc/samba/smb.conf samba配置文件
Day 06
管理员具备一切权限
Linux判断用户具备的权限：
     1.判断用户所属的身份（角色）    所有者>所属组>其他人   匹配及停止
     2.相应权限位的权限
目录的 r 权限:能够 ls 浏览此目录内容
目录的 w 权限:能够执行 rm/mv/cp/mkdir/touch/... 等更改目录内容的操作（对目录本身不生效。对子目录操作）
目录的 x 权限:能够 cd 切换到此目录
permission denied :权限不足
一般rx成对出现
linux 的权限没有并集，判断权限的方法： 所有者>所属组>其他人   匹配及停止
set GID:原来有x，s是小写，没有则S。目录。作用：继承父目录所属组身份。
          设置完后新增的才会继承。
LDAP认证(轻量级目录访问协议）
作用：集中管理科网络中的用户帐号，主要针对网络用户。
网络用户:由网络中一台服务器提供用户帐号，密码
本地用户： 用户信息由/etc/passwd


Engineer

day01
disk:磁盘  part:
  /dev/sdc5  表示 scsi类型的磁盘，第三块，第一个逻辑分区
                 scsi类型的磁盘，第三块，第5个分区


开机自动挂载分区

• 配置文件 /etc/fstab 的记录格式




• 配置文件 /etc/fstab 的记录格式
– 设备路径        挂载点            类型        参数           备份标记       检测顺序

 补充：vim  命令模式  按  o  另起一行进入   插入模式

 [root@server0 ~]# mount -a   #检测/etc/fstab文件格式，并尝试挂载设备
 [root@server0 ~]# df -h


总结分区：

1.查看识别硬盘          lsblk
2.划分分区                fdisk
3.刷新新的分区          partprobe
4.格式化                   mkfs.ext4
5.查看文件系统类型   blkid
6.挂载使用                mount
7.查看挂载使用          df  -h
8.完成开机自动挂载   /etc/fstab
9.验证书写内容         mount  -a

LVM逻辑卷

    作用：    1. 可以整合分散的空间
	         2. 逻辑卷可以容量扩大
将众多的物理卷（pv），组成卷组（vg），再从卷组中划分逻辑卷（lv），再去格式化逻辑卷，进行挂载
1.创建卷组 ：   vgcreate   卷组的名字    组成卷组的成员


2.创建逻辑卷 :  lvcreate  -n  逻辑卷的名字  -L 大小     卷组的名字  

逻辑卷的扩大,支持线上操作
一、卷组有足够的剩余空间
1.空间的扩展
[root@server0 ~]# lvextend -L 18G /dev/myvg/vo 
2.文件系统的扩展
   resize2fs : ext4文件系统扩展命令
   xfs_growfs : xfs文件系统扩展命令
二、卷组没有足够的剩余空间
1.扩展卷组空间
[root@server0 ~]# vgextend myvg /dev/vdc3
[root@server0 ~]# vgs

2.空间的扩展
[root@server0 ~]# vgs
[root@server0 ~]# lvextend -L 25G /dev/myvg/vo 
[root@server0 ~]# lvs  

3.文件系统的扩展


了解:逻辑卷的缩小,有风险

    1.先缩减文件系统的大小,在缩减空间的大小

PE:卷组划分空间的单位

day02
规范Shell脚本的一般组成
 • #! 环境声明(下面所有的语句解释程序)
 • # 注释文本
 • 可执行代码

管道传递
• 使用 | 管道操作
– 将前一条命令的标准输出交给后一条命令处理


重定向输出

   > : 只收集前面命令的正确输出
   2> : 只收集前面命令的错误输出
   &> : 前面命令正确与错误输出
/dev/null : 黑洞设备



  变量 :  容器  以不变名称,存放可以变化的值,让脚本适用多变的环境
  read  为变量赋值,读入用户在键盘上的输入,将用户在键盘上的输入赋值给变量




变量名
– 等号两边不要有空格
– 变量名由字母/数字/下划线组成,区分大小写
– 变量名不能以数字开头,不要使用关键字和特殊字符


– 引用变量值:$变量名
– 查看变量值:echo $变量名、echo ${变量名}

环境变量,由系统直接定义完成,赋值完成，直接调用

• 常见的环境变量
    USER : 当前登陆的系统身份

 检查文件状态
	-e : 存在 为真
	-d : 存在且为目录   才为真
	-f : 存在且为文件   才为真
	-r : 存在且对于对象有读权限  才为真
	-w : 存在且对于对象有写权限  才为真
	-x : 存在且对于对象有执行权限  才为真

 比较整数大小(带g都有大于二字,带e的都有等于二字,带l的都有小于二字)
 -gt :大于
 -ge :大于等于
 -eq :等于
 -ne :不等于
 -lt :小于
 -le :小于等于



$RANDOM :系统存储随机数字
$[$RANDOM%10] 0-10之间的随机数



day03

– 固定配置:/etc/selinux/config 文件

任何状态变成disabled(彻底禁用)，都必须通过重起reboot
• 影响指定用户的 bash 解释环境
– ~/.bashrc,每次开启 bash 终端时生效


• 影响所有用户的 bash 解释环境
– /etc/bashrc,每次开启 bash 终端时生效

ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'  创建了一个快捷方式的提示,不是报错.

防火墙策略的应用

   隔离作用

   硬件防火墙  配置简单,价格贵.

   软件防火墙  

RHEL7的防火墙体系
• 系统服务:firewalld(默认随机自启)
• 管理工具:firewall-cmd、firewall-config(图形)

预设安全区域
• 根据所在的网络场所区分,预设保护规则集
– public : 仅允许访问本机的sshd.DHCP,ping 等少数几个服务
– trusted : 允许任何访问
– block : 阻塞任何来访请求    (明确回应拒绝)
– drop : 丢弃任何来访的数据包 (没有明确回应，直接丢弃),工作中用的多,节省资源


防火墙的判断规则：匹配及停止

  1.客户端请求中的来源IP地址，查看本身所有区域的规则，如果有一个区域规则有该IP地址的规则，则进入该区域

  2.进入默认区域 （默认区域一般为public）

################################################################
常见的协议： 
	http    超文本传输协议  
	https   安全的超文本传输协议  
	ftp     文件传输协议 
	tftp    简单文件传输协议 
	telnet  远程管理协议 
	dns     域名解析协议
	smtp    邮件协议
	pop3    收邮件协议
	snmp    简单的管理协议


############################################################
防火墙策略永久配置

– 永久(permanent)

虚拟机Server0
# firewall-cmd --reload                  #重新加载防火墙所有配置
# firewall-cmd --zone=public  --list-all

# firewall-cmd --permanent --zone=public --add-service=http  #设置永久
# firewall-cmd --zone=public  --list-all 

# firewall-cmd --reload                  #重新加载防火墙所有配置
# firewall-cmd --zone=public  --list-all

#################################################################
防火墙对于客户端源IP控制

   拒绝172.25.0.10访问本机的所有服务,其他客户端都允许

虚拟机desktop0
[root@desktop0 ~]# firefox 172.25.0.11         #可以

虚拟机Server0
# firewall-cmd --zone=block --list-all 

# firewall-cmd --permanent --zone=block --add-source=172.25.0.10
# firewall-cmd --reload success
# firewall-cmd --zone=block --list-all 

虚拟机desktop0
[root@desktop0 ~]# firefox 172.25.0.11         #不可以
##########################################################


配置聚合连接(网卡绑定、链路聚合)

  作用：网卡设备的冗余

  热备份(activebackup)连接冗余


ipv6地址配置

  ip地址：唯一标识网络中主机地址

ipv4地址:
       32个二进制  分成4段  最后用  点  分隔  用10进制表示

ipv6地址：
       128个二进制  分成8段   最后用  冒号  分隔   用16进制表示

每段内连续的前置 0 可省略、连续的多个 : 可简化为 ::



虚拟机server0：

# nmcli connection modify 'System eth0' ipv6.method manual
 ipv6.addresses 2003:ac18::305/64 connection.autoconnect yes

# nmcli connection up 'System eth0'

# ping6 2003:ac18::305









配置聚合连接(网卡绑定、链路聚合)

  作用：网卡设备的冗余

  热备份(activebackup)连接冗余


1.创建虚拟网卡team0  (参考 man  teamd.conf)  /example  全文搜索

# nmcli connection add type team      
con-name team0 ifname team0 autoconnect yes         
config '{"runner": {"name": "activebackup"}}'
                
# nmcli connection 添加  类型为 team
  配置文件名字  team0  ifconfig显示的名字为 team0   每次开机自动启用
  配置    热备份方式

2.添加成员
# nmcli connection add type team-slave con-name team0-1 ifname eth1 master team0

# nmcli connection add type team-slave con-name team0-2 ifname eth2 master team0

# nmcli connection 添加  类型为  team的奴隶设备   配置文件名为  team0-1 奴隶的网卡名为 eth1  加入的组织为 team0

3.配置IP地址
[root@server0 ~]# nmcli connection modify team0 ipv4.method manual ipv4.addresses 192.168.1.1/24 connection.autoconnect yes

4.激活
# nmcli connection up team0
# nmcli connection up team0-1
# nmcli connection up team0-2

5.验证查看
# teamdctl team0 state
# ifconfig eth1 down
# teamdctl team0 state

如果配置错误，可以从头来，删掉从新做

# nmcli connection delete team0
# nmcli connection delete team0-1
# nmcli connection delete team0-2  
#############################################################



day04 
samba共享

– 用途:为客户机提供共享使用的文件夹

• 所需软件包:samba
• 系统服务:smb
• 默认samba必须有用户验证

– 删除用户:pdbedit -x 用户名



服务端虚拟机Server0

1.安装samba软件
[root@server0 ~]# yum -y install samba

2.建立Samba共享使用的帐号
[root@server0 ~]# useradd harry

[root@server0 ~]# pdbedit -a kenji      #将本地用户添加为Samba共享帐号

[root@server0 ~]# pdbedit -L       #显示所有Samba共享帐号

3. 修改配置文件
[root@server0 ~]# mkdir /common
[root@server0 ~]# echo 123  > /common/123.txt
[root@server0 ~]# ls /common/
[root@server0 ~]# vim /etc/samba/smb.conf #vim命令模式  /workgroup
                                         #vim命令模式 按G(大写)到全文的最后
......  
                                               
        workgroup = STAFF       #设置工作组     
......
        [common]                #共享名
        path = /common          #共享的实际路径





day 05
                   iSCSI磁盘
– 服务器提供磁盘空间,客户机连接并当成本地磁盘使用


服务端:虚拟机Server0
1.划分分区/dev/vdb
[root@server0 ~]# fdisk /dev/vdb
     n ----->创建新的分区 5G       

[root@server0 ~]# ls /dev/vdb1
/dev/vdb1
[root@server0 ~]# lsblk 

2.安装服务端软件包,提供共享存储服务程序
[root@server0 ~]# yum -y install targetcli

3.运行targetcli,交互式的界面

• 建立后端存储: /backstore/block  create  后端存储名  实际设备路径

• 建立磁盘组(相当于制作存放分区的箱子): /iscsi create 磁盘组的IQN名称

• 将共享的分区放入箱子中: /iscsi/磁盘组名/tpg1/luns create 后端存储路径

• 指定提供服务的ip地址: /iscsi/磁盘组名/tpg1/portals create IP地址

• 访问控制的设置:/iscsi/磁盘组名/tpg1/acls create 客户端声称的名字








                                                                 
